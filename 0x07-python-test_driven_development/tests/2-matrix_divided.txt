==============================
How to use 2-matrix_divided.py
==============================

This library gives information on the function matrix_divided(matrix, div).
The argument ``matrix`` is the matrix whose element in each row will be
divided by the second argument ``div``.

How it works:
=============
1. The matrix must be a list of lists of integers or floats, otherwise a
TypeError will be raised.
2. Each row of the matrix must be of the same size, otherwise a TypeError
will be raised.
3. div must be a number (integer or float), otherwise a TypeError will be raised
4. div canâ€™t be equal to 0, otherwise a ZeroDivisionError exception will
be raised
5. All elements of the matrix will be rounded to 2 decimal places after the
division.

Importing function from the module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided


When the matrix meets all the requirements
==========================================

::

	>>> matrix = [
	...		[1, 2, 3],
	... 	[4, 5, 6]
	... 	]
	>>> matrix_divided(matrix, 3) # doctest: +NORMALIZE_WHITESPACE
	[
		[0.33, 0.67, 1.0], 
		[1.33, 1.67, 2.0]
	]

::

	>>> matrix = [
	...		[-1, 2, -3],
	... 	[4, -5, 6]
	... 	]
	>>> matrix_divided(matrix, 3) # doctest: +NORMALIZE_WHITESPACE
	[
		[-0.33, 0.67, -1.0], 
		[1.33, -1.67, 2.0]
	]

::

	>>> matrix = [
	...		[1, 2, 3],
	... 	[4, 5, 6]
	... 	]
	>>> matrix_divided(matrix, -3) # doctest: +NORMALIZE_WHITESPACE
	[
		[-0.33, -0.67, -1.0], 
		[-1.33, -1.67, -2.0]
	]

::

	>>> matrix = [
	...		[-1, 2, -3],
	... 	[4, -5, 6]
	... 	]
	>>> matrix_divided(matrix, -3.5) # doctest: +NORMALIZE_WHITESPACE
	[
		[0.29, -0.57, 0.86], 
		[-1.14, 1.43, -1.71]
	]

::

	>>> matrix = [
	...		[5, 6, 7],
	... 	[4, 2, 3]
	... 	]
	>>> matrix_divided(matrix, 2.3) # doctest: +NORMALIZE_WHITESPACE
	[
		[2.17, 2.61, 3.04], 
		[1.74, 0.87, 1.3]
	]

::

	>>> matrix = [
	...     [1000000000, 2000000000, 3000000000],
	...     [4000000000, 5000000000, 6000000000]
	... ]
	>>> matrix_divided(matrix, 2) # doctest: +NORMALIZE_WHITESPACE
	[
    	[500000000.0, 1000000000.0, 1500000000.0], 
    	[2000000000.0, 2500000000.0, 3000000000.0]
	]


When Exceptions will likely occur
=================================

1. When the divisor is zero

::

	>>> matrix = [
	...		[1, 2, 3],
	... 	[4, 5, 6]
	... 	]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
		...
	ZeroDivisionError: division by zero

2. When the divisor is not a number

::

	>>> matrix = [
	...		[1, 2, 3],
	... 	[4, 5, 6]
	... 	]
	>>> matrix_divided(matrix, 'a')
	Traceback (most recent call last):
		...
	TypeError: div must be a number

::

	>>> matrix = [
	...		[1, 2, 3],
	... 	[4, 5, 6]
	... 	]
	>>> matrix_divided(matrix, True)
	Traceback (most recent call last):
		...
	TypeError: div must be a number

::

	>>> matrix = [
	...		[1, 2, 3],
	... 	[4, 5, 6]
	... 	]
	>>> matrix_divided(matrix, [2])
	Traceback (most recent call last):
		...
	TypeError: div must be a number

3. When matrix is not a list of lists of integers or floats:

::

	>>> matrix = []
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::

	>>> matrix = [
	...		['a', 2, 3],
	... 	[4, 5, 6]
	... 	]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::

	>>> matrix = [
	...		[1, 2, 3],
	... 	[4, 5, True]
	... 	]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::
	>>> matrix = [
	...		[1, 'School', 3],
	... 	[4, 5, 6]
	... 	]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

4. When each row of the matrix are not of the same size:

::

	>>> matrix = [
	...		[1, 2, 3, 7],
	... 	[4, 5, 6]
	... 	]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

::

	>>> matrix = [
	...		[1, 2, 3],
	... 	[4, 5, 6, 7]
	... 	]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

::

	>>> matrix = [
	...		[],
	... 	[4, 5, 6]
	... 	]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size
